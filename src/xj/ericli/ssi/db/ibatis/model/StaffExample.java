package xj.ericli.ssi.db.ibatis.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StaffExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public StaffExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected StaffExample(StaffExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table staff
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0 || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andStaffIdIsNull() {
			addCriterion("STAFF_ID is null");
			return this;
		}

		public Criteria andStaffIdIsNotNull() {
			addCriterion("STAFF_ID is not null");
			return this;
		}

		public Criteria andStaffIdEqualTo(Integer value) {
			addCriterion("STAFF_ID =", value, "staffId");
			return this;
		}

		public Criteria andStaffIdNotEqualTo(Integer value) {
			addCriterion("STAFF_ID <>", value, "staffId");
			return this;
		}

		public Criteria andStaffIdGreaterThan(Integer value) {
			addCriterion("STAFF_ID >", value, "staffId");
			return this;
		}

		public Criteria andStaffIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("STAFF_ID >=", value, "staffId");
			return this;
		}

		public Criteria andStaffIdLessThan(Integer value) {
			addCriterion("STAFF_ID <", value, "staffId");
			return this;
		}

		public Criteria andStaffIdLessThanOrEqualTo(Integer value) {
			addCriterion("STAFF_ID <=", value, "staffId");
			return this;
		}

		public Criteria andStaffIdIn(List values) {
			addCriterion("STAFF_ID in", values, "staffId");
			return this;
		}

		public Criteria andStaffIdNotIn(List values) {
			addCriterion("STAFF_ID not in", values, "staffId");
			return this;
		}

		public Criteria andStaffIdBetween(Integer value1, Integer value2) {
			addCriterion("STAFF_ID between", value1, value2, "staffId");
			return this;
		}

		public Criteria andStaffIdNotBetween(Integer value1, Integer value2) {
			addCriterion("STAFF_ID not between", value1, value2, "staffId");
			return this;
		}

		public Criteria andDeptIdIsNull() {
			addCriterion("DEPT_ID is null");
			return this;
		}

		public Criteria andDeptIdIsNotNull() {
			addCriterion("DEPT_ID is not null");
			return this;
		}

		public Criteria andDeptIdEqualTo(Integer value) {
			addCriterion("DEPT_ID =", value, "deptId");
			return this;
		}

		public Criteria andDeptIdNotEqualTo(Integer value) {
			addCriterion("DEPT_ID <>", value, "deptId");
			return this;
		}

		public Criteria andDeptIdGreaterThan(Integer value) {
			addCriterion("DEPT_ID >", value, "deptId");
			return this;
		}

		public Criteria andDeptIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("DEPT_ID >=", value, "deptId");
			return this;
		}

		public Criteria andDeptIdLessThan(Integer value) {
			addCriterion("DEPT_ID <", value, "deptId");
			return this;
		}

		public Criteria andDeptIdLessThanOrEqualTo(Integer value) {
			addCriterion("DEPT_ID <=", value, "deptId");
			return this;
		}

		public Criteria andDeptIdIn(List values) {
			addCriterion("DEPT_ID in", values, "deptId");
			return this;
		}

		public Criteria andDeptIdNotIn(List values) {
			addCriterion("DEPT_ID not in", values, "deptId");
			return this;
		}

		public Criteria andDeptIdBetween(Integer value1, Integer value2) {
			addCriterion("DEPT_ID between", value1, value2, "deptId");
			return this;
		}

		public Criteria andDeptIdNotBetween(Integer value1, Integer value2) {
			addCriterion("DEPT_ID not between", value1, value2, "deptId");
			return this;
		}

		public Criteria andStaffNameIsNull() {
			addCriterion("STAFF_NAME is null");
			return this;
		}

		public Criteria andStaffNameIsNotNull() {
			addCriterion("STAFF_NAME is not null");
			return this;
		}

		public Criteria andStaffNameEqualTo(String value) {
			addCriterion("STAFF_NAME =", value, "staffName");
			return this;
		}

		public Criteria andStaffNameNotEqualTo(String value) {
			addCriterion("STAFF_NAME <>", value, "staffName");
			return this;
		}

		public Criteria andStaffNameGreaterThan(String value) {
			addCriterion("STAFF_NAME >", value, "staffName");
			return this;
		}

		public Criteria andStaffNameGreaterThanOrEqualTo(String value) {
			addCriterion("STAFF_NAME >=", value, "staffName");
			return this;
		}

		public Criteria andStaffNameLessThan(String value) {
			addCriterion("STAFF_NAME <", value, "staffName");
			return this;
		}

		public Criteria andStaffNameLessThanOrEqualTo(String value) {
			addCriterion("STAFF_NAME <=", value, "staffName");
			return this;
		}

		public Criteria andStaffNameLike(String value) {
			addCriterion("STAFF_NAME like", value, "staffName");
			return this;
		}

		public Criteria andStaffNameNotLike(String value) {
			addCriterion("STAFF_NAME not like", value, "staffName");
			return this;
		}

		public Criteria andStaffNameIn(List values) {
			addCriterion("STAFF_NAME in", values, "staffName");
			return this;
		}

		public Criteria andStaffNameNotIn(List values) {
			addCriterion("STAFF_NAME not in", values, "staffName");
			return this;
		}

		public Criteria andStaffNameBetween(String value1, String value2) {
			addCriterion("STAFF_NAME between", value1, value2, "staffName");
			return this;
		}

		public Criteria andStaffNameNotBetween(String value1, String value2) {
			addCriterion("STAFF_NAME not between", value1, value2, "staffName");
			return this;
		}

		public Criteria andCardIdIsNull() {
			addCriterion("CARD_ID is null");
			return this;
		}

		public Criteria andCardIdIsNotNull() {
			addCriterion("CARD_ID is not null");
			return this;
		}

		public Criteria andCardIdEqualTo(String value) {
			addCriterion("CARD_ID =", value, "cardId");
			return this;
		}

		public Criteria andCardIdNotEqualTo(String value) {
			addCriterion("CARD_ID <>", value, "cardId");
			return this;
		}

		public Criteria andCardIdGreaterThan(String value) {
			addCriterion("CARD_ID >", value, "cardId");
			return this;
		}

		public Criteria andCardIdGreaterThanOrEqualTo(String value) {
			addCriterion("CARD_ID >=", value, "cardId");
			return this;
		}

		public Criteria andCardIdLessThan(String value) {
			addCriterion("CARD_ID <", value, "cardId");
			return this;
		}

		public Criteria andCardIdLessThanOrEqualTo(String value) {
			addCriterion("CARD_ID <=", value, "cardId");
			return this;
		}

		public Criteria andCardIdLike(String value) {
			addCriterion("CARD_ID like", value, "cardId");
			return this;
		}

		public Criteria andCardIdNotLike(String value) {
			addCriterion("CARD_ID not like", value, "cardId");
			return this;
		}

		public Criteria andCardIdIn(List values) {
			addCriterion("CARD_ID in", values, "cardId");
			return this;
		}

		public Criteria andCardIdNotIn(List values) {
			addCriterion("CARD_ID not in", values, "cardId");
			return this;
		}

		public Criteria andCardIdBetween(String value1, String value2) {
			addCriterion("CARD_ID between", value1, value2, "cardId");
			return this;
		}

		public Criteria andCardIdNotBetween(String value1, String value2) {
			addCriterion("CARD_ID not between", value1, value2, "cardId");
			return this;
		}
	}
}