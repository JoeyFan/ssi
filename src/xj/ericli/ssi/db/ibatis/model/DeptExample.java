package xj.ericli.ssi.db.ibatis.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeptExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public DeptExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected DeptExample(DeptExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table dept
	 * @abatorgenerated  Fri Dec 10 14:27:45 CST 2010
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0 || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andDeptidIsNull() {
			addCriterion("deptId is null");
			return this;
		}

		public Criteria andDeptidIsNotNull() {
			addCriterion("deptId is not null");
			return this;
		}

		public Criteria andDeptidEqualTo(Integer value) {
			addCriterion("deptId =", value, "deptid");
			return this;
		}

		public Criteria andDeptidNotEqualTo(Integer value) {
			addCriterion("deptId <>", value, "deptid");
			return this;
		}

		public Criteria andDeptidGreaterThan(Integer value) {
			addCriterion("deptId >", value, "deptid");
			return this;
		}

		public Criteria andDeptidGreaterThanOrEqualTo(Integer value) {
			addCriterion("deptId >=", value, "deptid");
			return this;
		}

		public Criteria andDeptidLessThan(Integer value) {
			addCriterion("deptId <", value, "deptid");
			return this;
		}

		public Criteria andDeptidLessThanOrEqualTo(Integer value) {
			addCriterion("deptId <=", value, "deptid");
			return this;
		}

		public Criteria andDeptidIn(List values) {
			addCriterion("deptId in", values, "deptid");
			return this;
		}

		public Criteria andDeptidNotIn(List values) {
			addCriterion("deptId not in", values, "deptid");
			return this;
		}

		public Criteria andDeptidBetween(Integer value1, Integer value2) {
			addCriterion("deptId between", value1, value2, "deptid");
			return this;
		}

		public Criteria andDeptidNotBetween(Integer value1, Integer value2) {
			addCriterion("deptId not between", value1, value2, "deptid");
			return this;
		}

		public Criteria andDeptnameIsNull() {
			addCriterion("deptName is null");
			return this;
		}

		public Criteria andDeptnameIsNotNull() {
			addCriterion("deptName is not null");
			return this;
		}

		public Criteria andDeptnameEqualTo(String value) {
			addCriterion("deptName =", value, "deptname");
			return this;
		}

		public Criteria andDeptnameNotEqualTo(String value) {
			addCriterion("deptName <>", value, "deptname");
			return this;
		}

		public Criteria andDeptnameGreaterThan(String value) {
			addCriterion("deptName >", value, "deptname");
			return this;
		}

		public Criteria andDeptnameGreaterThanOrEqualTo(String value) {
			addCriterion("deptName >=", value, "deptname");
			return this;
		}

		public Criteria andDeptnameLessThan(String value) {
			addCriterion("deptName <", value, "deptname");
			return this;
		}

		public Criteria andDeptnameLessThanOrEqualTo(String value) {
			addCriterion("deptName <=", value, "deptname");
			return this;
		}

		public Criteria andDeptnameLike(String value) {
			addCriterion("deptName like", value, "deptname");
			return this;
		}

		public Criteria andDeptnameNotLike(String value) {
			addCriterion("deptName not like", value, "deptname");
			return this;
		}

		public Criteria andDeptnameIn(List values) {
			addCriterion("deptName in", values, "deptname");
			return this;
		}

		public Criteria andDeptnameNotIn(List values) {
			addCriterion("deptName not in", values, "deptname");
			return this;
		}

		public Criteria andDeptnameBetween(String value1, String value2) {
			addCriterion("deptName between", value1, value2, "deptname");
			return this;
		}

		public Criteria andDeptnameNotBetween(String value1, String value2) {
			addCriterion("deptName not between", value1, value2, "deptname");
			return this;
		}
	}
}